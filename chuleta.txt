import React, { useState } from 'react';
import { registerRootComponent } from 'expo';
import { SafeAreaProvider  } from 'react-native-safe-area-context';
import { StyleSheet, View } from 'react-native';
import { Button } from './components/Button';
import { Row } from './components/Row';
import { Screen } from './components/Screen';
import { HistoryList } from './components/HistoryList';

/* === LÃ³gica de cÃ¡lculo interna (reemplaza calculate.ts) === */
function evaluateExpression(expression: string): string {
  try {
    // eslint-disable-next-line no-eval
    const result = eval(expression.replace(/Ã—/g, '*').replace(/Ã·/g, '/'));
    return result.toString();
  } catch {
    return 'Error';
  }
}

function canAppend(current: string, next: string): boolean {
  const lastChar = current.slice(-1);
  const operators = ['+', '-', 'Ã—', 'Ã·'];

  if (operators.includes(lastChar) && operators.includes(next)) return false;
  if (next === '.' && lastChar === '.') return false;
  if (next === '.' && /\.\d*$/.test(current.split(/[+\-Ã—Ã·]/).pop()!)) return false;

  return true;
}

/* === App principal === */
const App = () => {
  const [expression, setExpression] = useState('');
  const [history, setHistory] = useState<string[]>([]);
  const [scientific, setScientific] = useState(false);
  const [darkMode, setDarkMode] = useState(true);
  const [justEvaluated, setJustEvaluated] = useState(false);

  const handlePress = (value: string) => {
    const isNumber = /^[0-9.]$/.test(value);
    const isOperator = ['+', '-', 'Ã—', 'Ã·'].includes(value);

    if (value === 'C') {
      setExpression('');
      return;
    }

    if (value === 'âŒ«') {
      setExpression(expression.slice(0, -1));
      return;
    }

    if (value === '=') {
      const result = evaluateExpression(expression);
      if (result !== 'Error') {
        setHistory([`${expression} = ${result}`, ...history]);
        setExpression(result);
        setJustEvaluated(true);
      }
      return;
    }

    if (value === 'SCI') {
      setScientific(!scientific);
      return;
    }

    if (value === 'THEME') {
      setDarkMode(!darkMode);
      return;
    }

    // Si justo evaluÃ³ y ahora presiona un nÃºmero -> reinicia
    if (justEvaluated && isNumber) {
      setExpression(value);
      setJustEvaluated(false);
      return;
    }

    // Si justo evaluÃ³ y presiona operador -> continÃºa
    if (justEvaluated && isOperator) {
      setJustEvaluated(false);
    }

    if (canAppend(expression, value)) {
      setExpression(expression + value);
    }
  };

  const handleScientificFunction = (func: string) => {
    try {
      const replaced = expression.replace(/Ã—/g, '*').replace(/Ã·/g, '/');
      let result: number;
      switch (func) {
        case 'sin':
          result = Math.sin(eval(replaced));
          break;
        case 'cos':
          result = Math.cos(eval(replaced));
          break;
        case 'tan':
          result = Math.tan(eval(replaced));
          break;
        case 'âˆš':
          result = Math.sqrt(eval(replaced));
          break;
        case 'xÂ²':
          result = Math.pow(eval(replaced), 2);
          break;
        case 'Ï€':
          setExpression(expression + Math.PI.toString());
          return;
        default:
          return;
      }
      const resStr = result.toString();
      setHistory([`${func}(${expression}) = ${resStr}`, ...history]);
      setExpression(resStr);
      setJustEvaluated(true);
    } catch {
      setExpression('Error');
    }
  };

  const theme = darkMode ? darkTheme : lightTheme;

  return (
    <SafeAreaProvider style={[styles.container, { backgroundColor: theme.bg }]}>
      <View style={styles.calculator}>
        <Screen value={expression} />
        <HistoryList history={history} />

        {/* Botones cientÃ­ficos */}
        {scientific && (
          <>
            <Row>
              <Button label="sin" onPress={() => handleScientificFunction('sin')} type="operator" />
              <Button label="cos" onPress={() => handleScientificFunction('cos')} type="operator" />
              <Button label="tan" onPress={() => handleScientificFunction('tan')} type="operator" />
              <Button label="âˆš" onPress={() => handleScientificFunction('âˆš')} type="operator" />
            </Row>
            <Row>
              <Button label="xÂ²" onPress={() => handleScientificFunction('xÂ²')} type="operator" />
              <Button label="Ï€" onPress={() => handleScientificFunction('Ï€')} type="operator" />
            </Row>
          </>
        )}

        {/* Botones estÃ¡ndar */}
        <Row>
          <Button label="7" onPress={() => handlePress('7')} />
          <Button label="8" onPress={() => handlePress('8')} />
          <Button label="9" onPress={() => handlePress('9')} />
          <Button label="Ã·" onPress={() => handlePress('Ã·')} type="operator" />
        </Row>
        <Row>
          <Button label="4" onPress={() => handlePress('4')} />
          <Button label="5" onPress={() => handlePress('5')} />
          <Button label="6" onPress={() => handlePress('6')} />
          <Button label="Ã—" onPress={() => handlePress('Ã—')} type="operator" />
        </Row>
        <Row>
          <Button label="1" onPress={() => handlePress('1')} />
          <Button label="2" onPress={() => handlePress('2')} />
          <Button label="3" onPress={() => handlePress('3')} />
          <Button label="-" onPress={() => handlePress('-')} type="operator" />
        </Row>
        <Row>
          <Button label="0" onPress={() => handlePress('0')} />
          <Button label="." onPress={() => handlePress('.')} />
          <Button label="C" onPress={() => handlePress('C')} type="action" />
          <Button label="+" onPress={() => handlePress('+')} type="operator" />
        </Row>
        <Row>
          <Button label="âŒ«" onPress={() => handlePress('âŒ«')} type="action" />
          <Button label="SCI" onPress={() => handlePress('SCI')} type="action" />
          <Button label="ðŸŒ“" onPress={() => handlePress('THEME')} type="action" />
          <Button label="=" onPress={() => handlePress('=')} type="operator" />
        </Row>
      </View>
    </SafeAreaProvider>
  );
};

/* === Temas === */
const darkTheme = {
  bg: '#111',
};

const lightTheme = {
  bg: '#f6f6f6',
};

/* === Estilos === */
const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: 'center',
    paddingHorizontal: 10,
  },
  calculator: {
    flex: 1,
    justifyContent: 'flex-end',
    marginVertical: 30,
  },
});

registerRootComponent(App);
